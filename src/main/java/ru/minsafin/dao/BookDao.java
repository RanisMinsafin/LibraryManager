package ru.minsafin.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.DependsOn;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import ru.minsafin.models.Book;
import ru.minsafin.models.Person;

import javax.sql.DataSource;
import java.util.List;
import java.util.Optional;

@Component
@DependsOn("personDao")
public class BookDao implements Dao<Book> {

    private JdbcTemplate jdbcTemplate;

    public BookDao() {
    }

    @Autowired
    public BookDao(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
        createTable();
    }

    private void createTable() {
        jdbcTemplate.execute(
                "create schema if not exists library;\n" +
                        "create table if not exists library.book(\n" +
                        "    id int generated by default as identity primary key,\n" +
                        "    title varchar(50) not null unique,\n" +
                        "    author varchar(30) not null,\n" +
                        "    publication_year int," +
                        "    owner_id int null references library.person(id) on delete set null);"
        );
    }

    @Override
    public void create(Book book) {
        jdbcTemplate.update(
                "insert into library.book (title, author, publication_year) values (?,?,?)",
                book.getTitle(), book.getAuthor(), book.getPublicationYear()
        );
    }

    @Override
    public void update(Book updatedBook) {
        jdbcTemplate.update(
                "update library.book set title = ?, author = ?, publication_year = ? where id = ?",
                updatedBook.getTitle(), updatedBook.getAuthor(), updatedBook.getPublicationYear(), updatedBook.getId()
        );
    }

    @Override
    public void delete(int id) {
        jdbcTemplate.update("delete from library.book where id = ?", id);
    }

    @Override
    public Optional<Book> getById(int id) {
        return jdbcTemplate.query("select * from library.book where id = ?", new Object[]{id}, new BeanPropertyRowMapper<>(Book.class))
                .stream().findAny();
    }

    @Override
    public Optional<Book> getByName(String title) {
        return jdbcTemplate.query("select * from library.book where title = ?", new Object[]{title}, new BeanPropertyRowMapper<>(Book.class))
                .stream().findAny();
    }

    @Override
    public List<Book> getAll() {
        return jdbcTemplate.query("select * from library.book", new BeanPropertyRowMapper<>(Book.class));
    }

    public List<Person> getAllPersons() {
        return jdbcTemplate.query("select * from library.person", new BeanPropertyRowMapper<>(Person.class));
    }

    public Optional<Person> getBookOwner(int id) {
        return jdbcTemplate.query(
                "select * from library.person p " +
                        "join library.book b on p.id = b.owner_id " +
                        "where b.id = ?", new Object[]{id},
                new BeanPropertyRowMapper<>(Person.class)).stream().findAny();
    }


    public void assignPerson(int id, Person selectedPerson) {
        jdbcTemplate.update("update library.book set owner_id = ? where id = ?",
                selectedPerson.getId(), id);
    }

    public void release(int id) {
        jdbcTemplate.update("update library.book set owner_id = null where id = ?", id);
    }
}
