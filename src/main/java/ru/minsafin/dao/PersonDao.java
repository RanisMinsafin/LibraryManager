package ru.minsafin.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import ru.minsafin.models.Book;
import ru.minsafin.models.Person;

import javax.sql.DataSource;
import java.util.List;
import java.util.Optional;

@Component
public class PersonDao implements Dao<Person> {
    private JdbcTemplate jdbcTemplate;

    public PersonDao() {
    }

    @Autowired
    public PersonDao(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
        createTable();
    }

    private void createTable() {
        jdbcTemplate.execute(
                "create schema if not exists library;\n" +
                        "create table if not exists library.person(\n" +
                        "    id int generated by default as identity primary key,\n" +
                        "    name varchar(30) not null unique,\n" +
                        "    birth_year int);"
        );
    }

    @Override
    public void create(Person person) {
        jdbcTemplate.update(
                "insert into library.person (name, birth_year) values (?,?)",
                person.getName(), person.getBirthYear()
        );
    }

    @Override
    public void update(Person updatedPerson) {
        jdbcTemplate.update(
                "update library.person set name = ?, birth_year = ?  where id = ?",
                updatedPerson.getName(), updatedPerson.getBirthYear(), updatedPerson.getId()
        );
    }

    @Override
    public void delete(int id) {
        jdbcTemplate.update("delete from library.person where id = ?", id);
    }

    @Override
    public Optional<Person> getById(int id) {
        return jdbcTemplate.query("select * from library.person where id = ?", new Object[]{id}, new BeanPropertyRowMapper<>(Person.class))
                .stream().findAny();
    }

    @Override
    public Optional<Person> getByName(String name) {
        return jdbcTemplate.query("select * from library.person where name = ?", new Object[]{name}, new BeanPropertyRowMapper<>(Person.class))
                .stream().findAny();
    }

    @Override
    public List<Person> getAll() {
        return jdbcTemplate.query("select * from library.person", new BeanPropertyRowMapper<>(Person.class));
    }

    public List<Book> getBooksByPerson(int id) {
        return jdbcTemplate.query("select * from library.book where owner_id =?", new Object[]{id},
                new BeanPropertyRowMapper<>(Book.class));
    }
}
